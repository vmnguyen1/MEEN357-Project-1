#Matthew Nguyen
#Ryan Galley
#Cory Chapman
#MEEN 357 - 505
#Group 1 Project Phase 1

import numpy as np
import math

#define constants

#r = 0.30    #m #wheel radius
#wm = 1.0    #kg #wheel mass
#t_s = 170   #Nm #motor stall torque
#t_nl = 0    #Nm #motor no-load torque
#w_nl = 3.80 #rad/s #motor no-load speed
#mm = 5.9    #kg #motor mass
#spm = 75    #kg #science payload mass
#rtgm = 90   #kg #RTG mass (power subsystem)
#cm = 659    #kg #chassis mass (mass of rover structure)
#d1 = 0.04   #m #speed reducer pinion diameter 
#d2 = 0.07   #m #speed reducer gear diameter 
#srm = 1.5   #kg #speed reducer mass 
#gmars = 3.72#m/s^2 #acceleration due to gravity 


rover = {'wheel_assembly':{'wheel':{'radius': 0.30 , 'mass': 1.0},
                           'speed_reducer':{'type': 'reverted' , 'diam_pinion': 0.04 , 'diam_gear': 0.07 , 'mass': 1.5}, 
                           'motor':{'torque_stall': 170 , 'torque_noload': 0 , 'speed_noload': 3.80 , 'mass': 5.0}}, 
         'chassis':{'mass': 659}, 
         'science_payload':{'mass': 75}, 
         'power_subsys':{'mass': 90}}
wheel_assembly = {'wheel':{'radius': 0.30 , 'mass': 1.0},
                  'speed_reducer':{'type': 'reverted' , 'diam_pinion': 0.04 , 'diam_gear': 0.07 , 'mass': 1.5}, 
                  'motor':{'torque_stall': 170 , 'torque_noload': 0 , 'speed_noload': 3.80 , 'mass': 5.0}}
speed_reducer = {'type': 'reverted' , 'diam_pinion': 0.04 , 'diam_gear': 0.07 , 'mass': 1.5}
motor = {'torque_stall': 170 , 'torque_noload': 0 , 'speed_noload': 3.80 , 'mass': 5.9}
planet = {'g': 3.72}


def get_mass(rover):
    if type(rover) != dict:
        raise Exception("rover is not a dictionary")
    else:
        m = 6*rover['wheel_assembly']['wheel']['mass']+ 6*rover['wheel_assembly']['speed_reducer']['mass']+ 6*rover['wheel_assembly']['motor']['mass']+ rover['chassis']['mass']+ rover['science_payload']['mass']+ rover['power_subsys']['mass']
        return m
    

def get_gear_ratio(speed_reducer):
    if type(speed_reducer) != dict:
        raise Exception("rover is not a dictionary")
    if rover['wheel_assembly']['speed_reducer']['type'] != 'reverted' :
        print('''Error: 'type' field is not "reverted"''')
    else:
        Ng = (rover['wheel_assembly']['speed_reducer']['diam_gear'] / rover['wheel_assembly']['speed_reducer']['diam_pinion'])**2
        return Ng



def tau_dcmotor(omega, motor):
    if type(omega) != np.ndarray:
        raise Exception("omega is not a scalar or vector")
    if type(motor) != dict:
        raise Exception("motor is not a dictionary")
    else:
        tau = []
        for i in omega:
            tau.append(motor['torque_stall'] - ((motor['torque_stall'] - motor['torque_noload']) / motor['speed_noload'])*i)
        return tau


def F_drive(omega, rover):
    tau = tau_dcmotor(omega, motor)
    if type(omega) != np.ndarray:
        raise Exception("omega is not a scalar or vector")
    if type(rover) != dict:
        raise Exception("rover is not a dictionary")
    else:
        Ng = get_gear_ratio(speed_reducer)
        Fd = []
        for i in tau:
            Fd.append(6*i*Ng/ rover['wheel_assembly']['wheel']['radius'])
        return Fd

    

def F_gravity(terrain_angle, rover, planet):
    if type(terrain_angle) != np.ndarray:
        raise Exception("terrain_angle is not a scalar or vector")
    for i in terrain_angle:
        if i < -75:
            raise Exception("terrain angle is less than -75 degrees")
        if i > 75:
            raise Exception("terrain angle is more than -75 degrees")
    if type(rover) != dict:
        raise Exception("rover is not a dictionary")
    if type(planet) !=dict:
        raise Exception("planet is not a dictionary")
    else:
        m = get_mass(rover)
        gmars = planet['g']
        Fgt = []
        for i in terrain_angle:
            Fgt_point = m*gmars*math.sin(i)
            Fgt_point = -Fgt_point
            Fgt.append(Fgt_point)
        return Fgt
    

def F_rolling(omega, terrain_angle, rover, planet, Crr):
    m = get_mass(rover)
    Ng = get_gear_ratio(speed_reducer)
    if type(omega) != np.ndarray:
        raise Exception("omega is not a scalar or vector")
    if type(terrain_angle) != np.ndarray:
        raise Exception("terrain_angle is not a scalar or vector")
    for i in terrain_angle:
        if i < -75:
            raise Exception("terrain angle is less than -75 degrees")
        if i > 75:
            raise Exception("terrain angle is more than -75 degrees")
    if type(rover) != dict:
        raise Exception("rover is not a dictionary")
    if type(planet) !=dict:
        raise Exception("planet is not a dictionary")
    else:
        gmars = planet['g']
        V_rover = []
        for i in range(len(omega)):
            V_rover.append(rover['wheel_assembly']['wheel']['radius']*(omega[i]) / Ng)
        Fn = []
        for i in terrain_angle:
            Fn_point = m*gmars*math.cos(i)
            Fn.append(Fn_point)
        Frrsimple = []
        for i in Fn:
            Frrsimple.append(Crr*i)
        Frr = []
        for i in range(len(Frrsimple)):
            Frr.append(-1*(math.erf(40*V_rover[i])*Frrsimple[i]))
        return Frr


def F_net(omega, terrain_angle, rover, planet, Crr):
    Fd = F_drive(omega, rover)
    Fgt = F_gravity(terrain_angle, rover, planet)
    Frr = F_rolling(omega, terrain_angle, rover, planet, Crr)
    if type(omega) != np.ndarray:
        raise Exception("omega is not a scalar or vector")
    if type(terrain_angle) != np.ndarray:
        raise Exception("terrain_angle is not a scalar or vector")
    for i in terrain_angle:
        if i < -75 :
            raise Exception("terrain angle is less than -75 degrees")
        if i > 75 :
            raise Exception("terrain angle is more than -75 degrees")
    if type(rover) != dict:
        raise Exception("rover is not a dictionary")
    if type(planet) !=dict:
        raise Exception("planet is not a dictionary")
    else:
        F = []
        for i in range(len(Fd)):
            x = Fd[i] + Frr[i] + Fgt[i]
            F.append(x)
        return F

    
omega = np.linspace(1,3.8,10)
print('omega =',omega)
terrain_angle_deg = np.linspace(-10,35,10)
terrain_angle =  np.linspace(-10,35,10) * (math.pi)/180
print('\nterrain_angle_deg =',terrain_angle_deg)
Crr = -0.2
Crr = abs(Crr)


m = get_mass(rover)
print('\nrover mass =',m, 'kg')

Ng = get_gear_ratio(speed_reducer)
print('\nthe gear ratio =',Ng)

tau = tau_dcmotor(omega, motor)
print('\nthe motor shaft torque =',tau,'Nm')

Fd = F_drive(omega, rover)
print('\nthe drive force =',Fd,'N')

Fgt = F_gravity(terrain_angle, rover, planet)
print("\nthe gravitational force of the rover =", Fgt, "N")

F_rr = F_rolling(omega, terrain_angle, rover, planet, Crr)
print("\nthe rolling resistance force of the rover =",F_rr,"N")
    
F = F_net(omega, terrain_angle, rover, planet, Crr)
print("\nthe net force of the rover =",F,"N")
